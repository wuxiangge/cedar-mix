package q121;
//给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
//
// 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
//
// 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
//
//
//
// 示例 1：
//
//
//输入：[7,1,5,3,6,4]
//输出：5
//解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
//     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
//
//
// 示例 2：
//
//
//输入：prices = [7,6,4,3,1]
//输出：0
//解释：在这种情况下, 没有交易完成, 所以最大利润为 0。
//
//
//
//
// 提示：
//
//
// 1 <= prices.length <= 105
// 0 <= prices[i] <= 104
//
// Related Topics 数组 动态规划
// 👍 1626 👎 0

//dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
//        max(   选择 rest  ,             选择 sell      )
//
//        解释：今天我没有持有股票，有两种可能：
//        要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；
//        要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。
//
//        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
//        max(   选择 rest  ,           选择 buy         )
//
//        解释：今天我持有着股票，有两种可能：
//        要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；
//        要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。
//
//
//
//        dp[-1][k][0] = 0
//        解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。
//        dp[-1][k][1] = -infinity
//        解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。
//        dp[i][0][0] = 0
//        解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。
//        dp[i][0][1] = -infinity
//        解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。
//
//
//        base case：
//        dp[-1][k][0] = dp[i][0][0] = 0
//        dp[-1][k][1] = dp[i][0][1] = -infinity
//
//        状态转移方程：
//        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
//        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
//
//
//        dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])
//        dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])
//        = max(dp[i-1][1][1], -prices[i])
//        解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。
//
//        现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。
//        可以进行进一步化简去掉所有 k：
//        dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
//        dp[i][1] = max(dp[i-1][1], -prices[i])


/**
 * @author zhangnan
 * @date 2021/5/17 15:17
 */
public class Solution {

    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }

        int n = prices.length;
        int[][] dp = new int[n][2];


        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);
        }
        return dp[n - 1][0];
    }
}
